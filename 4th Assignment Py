def process_file_with_line_numbers(input_filepath, output_filepath):
    """
    Reads content from an input file, adds line numbers to each line,
    and writes the modified content to an output file.

    Includes comprehensive error handling for file operations.

    Args:
        input_filepath (str): The path to the input file.
        output_filepath (str): The path to the output file where
                                the modified content will be written.
    """
    try:
        # Step 1: Read the contents of the input file
        # 'r' mode opens the file for reading.
        # 'encoding="utf-8"' ensures proper handling of various characters.
        with open(input_filepath, 'r', encoding='utf-8') as infile:
            lines = infile.readlines() # Reads all lines into a list

        modified_lines = []
        # Step 2: Modify the content (add line numbers)
        for i, line in enumerate(lines):
            # Strip whitespace (like newlines) from the end of the line
            # then prepend the line number and a space.
            modified_lines.append(f"{i+1}: {line.strip()}\n")

        # Step 3: Write the modified version to a new file
        # 'w' mode opens the file for writing. If the file exists, it's truncated.
        # If it doesn't exist, a new one is created.
        with open(output_filepath, 'w', encoding='utf-8') as outfile:
            outfile.writelines(modified_lines) # Writes all modified lines

        # Print a success message
        print(f"✅ Success! Content from '{input_filepath}' processed and written to '{output_filepath}'.")

    except FileNotFoundError:
        # Handles the error if the input file does not exist
        print(f"❌ Error: The file '{input_filepath}' was not found. Please check the filename and path.")
    except PermissionError:
        # Handles errors related to file access permissions
        print(f"❌ Error: Permission denied. Cannot access '{input_filepath}' or write to '{output_filepath}'.")
    except IsADirectoryError:
        # Handles cases where the provided path is a directory, not a file
        print(f"❌ Error: '{input_filepath}' is a directory, not a file. Please provide a valid file path.")
    except Exception as e:
        # Catches any other unexpected errors during file operations
        print(f"❌ An unexpected error occurred: {e}")

# --- Main part of the program to get user input ---
if __name__ == "__main__":
    print("--- File Processing & Error Handling Program ---")

    # Ask the user for the input filename
    user_input_file = input("Please enter the name or path of the input file (e.g., my_data.txt): ")

    # Ask the user for the output filename
    user_output_file = input("Please enter the name for the new output file (e.g., processed_data.txt): ")

    # Call the function to perform the file operations
    process_file_with_line_numbers(user_input_file, user_output_file)

